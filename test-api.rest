### Variables
@baseUrl = http://localhost:3000
@orgId = REPLACE_WITH_CREATED_ID
@userId = REPLACE_WITH_CREATED_USER_ID
@courseId = REPLACE_WITH_CREATED_COURSE_ID
@accessToken = REPLACE_WITH_JWT_TOKEN

### 1. Créer une organisation
POST {{baseUrl}}/organizations
Content-Type: application/json

{
  "name": "Krav Maga Lyon Centre",
  "slug": "krav-maga-lyon-centre",
  "email": "contact@kravlyon.fr",
  "phone": "0612345678",
  "address": "123 rue de la République, 69002 Lyon"
}

### 2. Récupérer toutes les organisations
GET {{baseUrl}}/organizations

### 3. Récupérer une organisation par ID
GET {{baseUrl}}/organizations/{{orgId}}

### 4. Récupérer une organisation par slug
GET {{baseUrl}}/organizations/slug/krav-maga-lyon-centre

### 5. Mettre à jour une organisation
PATCH {{baseUrl}}/organizations/{{orgId}}
Content-Type: application/json

{
  "name": "Krav Maga Lyon Centre - Updated",
  "phone": "0698765432"
}

### 6. Supprimer une organisation (soft delete)
DELETE {{baseUrl}}/organizations/{{orgId}}

### 7. Restaurer une organisation
POST {{baseUrl}}/organizations/{{orgId}}/restore

### 8. Test validation - Devrait échouer (slug invalide)
POST {{baseUrl}}/organizations
Content-Type: application/json

{
  "name": "Test Org",
  "slug": "TEST_INVALID_SLUG!",
  "email": "test@example.com"
}

###############################################################################
# USERS ENDPOINTS
###############################################################################

### 9. Créer un utilisateur admin
POST {{baseUrl}}/users
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "admin@kravlyon.fr",
  "password": "SecurePassword123!",
  "first_name": "Jean",
  "last_name": "Dupont",
  "phone": "0612345678",
  "date_of_birth": "1985-05-15",
  "role": "admin",
  "status": "active"
}

### 10. Créer un utilisateur coach
POST {{baseUrl}}/users
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "coach@kravlyon.fr",
  "password": "SecurePassword123!",
  "first_name": "Marie",
  "last_name": "Martin",
  "phone": "0698765432",
  "role": "coach"
}

### 11. Créer un membre
POST {{baseUrl}}/users
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "membre@example.com",
  "password": "SecurePassword123!",
  "first_name": "Pierre",
  "last_name": "Durand",
  "role": "member"
}

### 12. Récupérer tous les utilisateurs
GET {{baseUrl}}/users

### 13. Récupérer tous les utilisateurs d'une organisation
GET {{baseUrl}}/users?organizationId={{orgId}}

### 14. Récupérer tous les coachs d'une organisation
GET {{baseUrl}}/users/organization/{{orgId}}?role=coach

### 15. Récupérer tous les membres d'une organisation
GET {{baseUrl}}/users/organization/{{orgId}}?role=member

### 16. Récupérer un utilisateur par ID
GET {{baseUrl}}/users/{{userId}}

### 17. Mettre à jour un utilisateur
PATCH {{baseUrl}}/users/{{userId}}
Content-Type: application/json

{
  "first_name": "Jean-Updated",
  "phone": "0611223344"
}

### 18. Changer le mot de passe d'un utilisateur
PATCH {{baseUrl}}/users/{{userId}}/password
Content-Type: application/json

{
  "newPassword": "NewSecurePassword456!"
}

### 19. Supprimer un utilisateur (soft delete)
DELETE {{baseUrl}}/users/{{userId}}

### 20. Restaurer un utilisateur
POST {{baseUrl}}/users/{{userId}}/restore

### 21. Test validation - Devrait échouer (mot de passe trop court)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "test@example.com",
  "password": "short",
  "first_name": "Test",
  "last_name": "User",
  "role": "member"
}

### 22. Test validation - Devrait échouer (email invalide)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "not-an-email",
  "password": "SecurePassword123!",
  "first_name": "Test",
  "last_name": "User",
  "role": "member"
}

### 23. Test validation - Devrait échouer (rôle invalide)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "test@example.com",
  "password": "SecurePassword123!",
  "first_name": "Test",
  "last_name": "User",
  "role": "super-admin"
}

###############################################################################
# COURSES ENDPOINTS
###############################################################################

### 24. Créer un cours simple
POST {{baseUrl}}/courses
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "title": "Krav Maga Débutants",
  "description": "Cours pour débutants - techniques de base",
  "course_type": "krav-maga",
  "start_datetime": "2025-11-03T18:00:00Z",
  "end_datetime": "2025-11-03T19:30:00Z",
  "location": "Dojo Principal",
  "coach_id": "{{userId}}",
  "max_capacity": 20,
  "status": "scheduled"
}

### 25. Créer un cours récurrent (tous les lundis)
POST {{baseUrl}}/courses
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "title": "Krav Maga Avancés - Lundi",
  "description": "Cours avancé tous les lundis",
  "course_type": "krav-maga",
  "start_datetime": "2025-11-03T19:45:00Z",
  "end_datetime": "2025-11-03T21:15:00Z",
  "location": "Dojo Principal",
  "coach_id": "{{userId}}",
  "max_capacity": 15,
  "is_recurring": true,
  "recurrence_rule": {
    "frequency": "weekly",
    "day_of_week": 1,
    "interval": 1,
    "count": 12
  },
  "status": "scheduled"
}

### 26. Récupérer tous les cours
GET {{baseUrl}}/courses

### 27. Récupérer tous les cours d'une organisation
GET {{baseUrl}}/courses?organizationId={{orgId}}

### 28. Récupérer les cours à venir (prochains 10)
GET {{baseUrl}}/courses/upcoming/{{orgId}}?limit=10

### 29. Récupérer les cours par plage de dates
GET {{baseUrl}}/courses/date-range/{{orgId}}?startDate=2025-11-01&endDate=2025-11-30

### 30. Récupérer un cours par ID
GET {{baseUrl}}/courses/{{courseId}}

### 31. Mettre à jour un cours
PATCH {{baseUrl}}/courses/{{courseId}}
Content-Type: application/json

{
  "title": "Krav Maga Débutants - MODIFIÉ",
  "max_capacity": 25
}

### 32. Annuler un cours
POST {{baseUrl}}/courses/{{courseId}}/cancel
Content-Type: application/json

{
  "reason": "Coach malade",
  "cancelFutureOccurrences": false
}

### 33. Annuler un cours et toutes les occurrences futures
POST {{baseUrl}}/courses/{{courseId}}/cancel
Content-Type: application/json

{
  "reason": "Fermeture du dojo pour travaux",
  "cancelFutureOccurrences": true
}

### 34. Supprimer un cours (soft delete)
DELETE {{baseUrl}}/courses/{{courseId}}

### 35. Restaurer un cours
POST {{baseUrl}}/courses/{{courseId}}/restore

### 36. Test validation - Devrait échouer (date de fin avant date de début)
POST {{baseUrl}}/courses
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "title": "Test cours invalide",
  "start_datetime": "2025-11-03T20:00:00Z",
  "end_datetime": "2025-11-03T18:00:00Z",
  "coach_id": "{{userId}}"
}

###############################################################################
# AUTH ENDPOINTS
###############################################################################

### 37. S'inscrire (Register)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "organization_id": "{{orgId}}",
  "email": "newuser@kravlyon.fr",
  "password": "SecurePassword123!",
  "first_name": "Nouveau",
  "last_name": "Membre",
  "phone": "0612345678",
  "role": "member"
}

### 38. Se connecter (Login)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@kravlyon.fr",
  "password": "SecurePassword123!"
}

### 39. Récupérer mon profil (nécessite JWT)
GET {{baseUrl}}/auth/me
Authorization: Bearer {{accessToken}}

### 40. Test - Login avec mauvais mot de passe (doit échouer)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@kravlyon.fr",
  "password": "wrongpassword"
}

### 41. Test - Login avec email inexistant (doit échouer)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "nonexistent@example.com",
  "password": "SecurePassword123!"
}

###############################################################################
# ATTENDANCES ENDPOINTS
###############################################################################

### 42. Déclarer une intention de présence ("Je serai là")
POST {{baseUrl}}/attendances/intention
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "course_id": "{{courseId}}",
  "user_id": "{{userId}}",
  "intention": "will_attend"
}

### 43. Changer d'avis ("Je ne viendrai pas")
POST {{baseUrl}}/attendances/intention
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "course_id": "{{courseId}}",
  "user_id": "{{userId}}",
  "intention": "will_not_attend"
}

### 44. Marquer sa présence effective (adhérent se marque présent)
POST {{baseUrl}}/attendances/mark
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "course_id": "{{courseId}}",
  "user_id": "{{userId}}",
  "actual_attendance": true
}

### 45. Coach marque la présence d'un adhérent
POST {{baseUrl}}/attendances/mark
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "course_id": "{{courseId}}",
  "user_id": "{{userId}}",
  "actual_attendance": true,
  "notes": "Arrivé à 19h05 (retard acceptable)"
}

### 46. Walk-in : présent sans inscription préalable
POST {{baseUrl}}/attendances/mark
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "course_id": "{{courseId}}",
  "user_id": "ANOTHER_USER_ID",
  "actual_attendance": true
}

### 47. Voir toutes les présences d'un cours
GET {{baseUrl}}/attendances/course/{{courseId}}
Authorization: Bearer {{accessToken}}

### 48. Voir les inscrits d'un cours (intentions "will_attend")
GET {{baseUrl}}/attendances/course/{{courseId}}/registered
Authorization: Bearer {{accessToken}}

### 49. Voir les présents effectifs d'un cours
GET {{baseUrl}}/attendances/course/{{courseId}}/present
Authorization: Bearer {{accessToken}}

### 50. Statistiques d'un cours
GET {{baseUrl}}/attendances/course/{{courseId}}/stats
Authorization: Bearer {{accessToken}}

### 51. Voir l'historique des présences d'un adhérent
GET {{baseUrl}}/attendances/user/{{userId}}
Authorization: Bearer {{accessToken}}

### 52. Statistiques d'un adhérent (taux présence, risque abandon)
GET {{baseUrl}}/attendances/user/{{userId}}/stats
Authorization: Bearer {{accessToken}}

### 53. Modifier une présence (admin override)
PATCH {{baseUrl}}/attendances/ATTENDANCE_ID
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "actual_attendance": false,
  "notes": "Corrigé par admin : était absent finalement"
}

### 54. Supprimer une présence
DELETE {{baseUrl}}/attendances/ATTENDANCE_ID
Authorization: Bearer {{accessToken}}

###############################################################################
# SUBSCRIPTIONS ENDPOINTS
###############################################################################

### 55. Créer un abonnement mensuel
POST {{baseUrl}}/subscriptions
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "user_id": "{{userId}}",
  "subscription_type": {
    "name": "Mensuel",
    "duration_months": 1,
    "price": 50,
    "currency": "EUR",
    "description": "Abonnement mensuel - Accès illimité",
    "benefits": ["Accès illimité aux cours", "1 cours privé offert"]
  },
  "start_date": "2025-01-01",
  "payment_status": "paid",
  "payment_method": "card",
  "auto_renew": true
}

### 56. Créer un abonnement trimestriel
POST {{baseUrl}}/subscriptions
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "user_id": "{{userId}}",
  "subscription_type": {
    "name": "Trimestriel",
    "duration_months": 3,
    "price": 135,
    "currency": "EUR",
    "description": "Abonnement trimestriel - 10% de réduction"
  },
  "start_date": "2025-01-01",
  "payment_status": "paid",
  "payment_method": "transfer"
}

### 57. Créer un abonnement annuel
POST {{baseUrl}}/subscriptions
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "user_id": "{{userId}}",
  "subscription_type": {
    "name": "Annuel",
    "duration_months": 12,
    "price": 480,
    "currency": "EUR",
    "description": "Abonnement annuel - 20% de réduction",
    "benefits": ["Accès illimité", "5 cours privés offerts", "Kit sportif offert"]
  },
  "start_date": "2025-01-01",
  "payment_status": "paid",
  "payment_method": "card"
}

### 58. Récupérer tous les abonnements de l'organisation
GET {{baseUrl}}/subscriptions
Authorization: Bearer {{accessToken}}

### 59. Statistiques des abonnements
GET {{baseUrl}}/subscriptions/stats
Authorization: Bearer {{accessToken}}

### 60. Abonnements qui expirent bientôt (7 jours)
GET {{baseUrl}}/subscriptions/expiring-soon
Authorization: Bearer {{accessToken}}

### 61. Abonnements expirés
GET {{baseUrl}}/subscriptions/expired
Authorization: Bearer {{accessToken}}

### 62. Marquer automatiquement les abonnements expirés
POST {{baseUrl}}/subscriptions/mark-expired
Authorization: Bearer {{accessToken}}

### 63. Récupérer l'historique des abonnements d'un utilisateur
GET {{baseUrl}}/subscriptions/user/{{userId}}
Authorization: Bearer {{accessToken}}

### 64. Récupérer l'abonnement actif d'un utilisateur
GET {{baseUrl}}/subscriptions/user/{{userId}}/active
Authorization: Bearer {{accessToken}}

### 65. Récupérer un abonnement par ID
GET {{baseUrl}}/subscriptions/SUBSCRIPTION_ID
Authorization: Bearer {{accessToken}}

### 66. Renouveler un abonnement
POST {{baseUrl}}/subscriptions/SUBSCRIPTION_ID/renew
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "payment_status": "paid",
  "payment_method": "card",
  "payment_reference": "RENEW-2025-001",
  "notes": "Renouvellement automatique"
}

### 67. Annuler un abonnement
POST {{baseUrl}}/subscriptions/SUBSCRIPTION_ID/cancel
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "reason": "Déménagement",
  "notes": "Client part à l'étranger"
}

### 68. Suspendre un abonnement (temporaire)
POST {{baseUrl}}/subscriptions/SUBSCRIPTION_ID/suspend
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "reason": "Blessure - suspension de 2 mois"
}

### 69. Réactiver un abonnement suspendu
POST {{baseUrl}}/subscriptions/SUBSCRIPTION_ID/reactivate
Authorization: Bearer {{accessToken}}

### 70. Modifier un abonnement
PATCH {{baseUrl}}/subscriptions/SUBSCRIPTION_ID
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "payment_status": "paid",
  "notes": "Paiement reçu en espèces"
}

### 71. Supprimer un abonnement
DELETE {{baseUrl}}/subscriptions/SUBSCRIPTION_ID
Authorization: Bearer {{accessToken}}

###############################################################################
# MULTI-TENANT SECURITY TESTS
###############################################################################

### 72. Test - Tentative d'accès à une organisation différente (doit échouer)
# Scénario : User de l'org A tente d'accéder aux users de l'org B
# Résultat attendu : 403 Forbidden
POST {{baseUrl}}/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "organization_id": "00000000-0000-0000-0000-000000000000",
  "email": "hack@example.com",
  "password": "Password123!",
  "first_name": "Hacker",
  "last_name": "Test",
  "role": "member"
}

### 73. Test - Tentative de créer un cours pour une autre organisation (doit échouer)
POST {{baseUrl}}/courses
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "organization_id": "00000000-0000-0000-0000-000000000000",
  "title": "Cours hacké",
  "start_datetime": "2025-02-01T19:00:00Z",
  "end_datetime": "2025-02-01T20:30:00Z"
}

### 74. Test - Tentative de créer un abonnement pour un user d'une autre org (doit échouer)
POST {{baseUrl}}/subscriptions
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "user_id": "00000000-0000-0000-0000-000000000000",
  "subscription_type": {
    "name": "Mensuel",
    "duration_months": 1,
    "price": 50,
    "currency": "EUR"
  },
  "start_date": "2025-01-01",
  "payment_status": "paid"
}

### 75. Note sur le Multi-tenant
# Le middleware multi-tenant protège automatiquement TOUTES les routes
#
# Protection :
# 1. TenantMiddleware : Extrait organization_id du JWT
# 2. TenantInterceptor : Valide que toutes les requêtes respectent l'isolation
# 3. Bloque automatiquement si organization_id différent
#
# Impossible de :
# - Créer des ressources pour une autre organisation
# - Lire des données d'une autre organisation
# - Modifier des données d'une autre organisation
# - Même en devinant les UUIDs
#
# Sécurité au niveau applicatif + base de données

###############################################################################
# AUDIT LOGS ENDPOINTS
###############################################################################

### 76. Récupérer tous les logs d'audit (avec filtres)
GET {{baseUrl}}/audit-logs?limit=20&offset=0
Authorization: Bearer {{accessToken}}

### 77. Filtrer les logs par action (CREATE)
GET {{baseUrl}}/audit-logs?action=CREATE&limit=20
Authorization: Bearer {{accessToken}}

### 78. Filtrer les logs par type d'entité
GET {{baseUrl}}/audit-logs?entity_type=User&limit=20
Authorization: Bearer {{accessToken}}

### 79. Filtrer les logs par utilisateur
GET {{baseUrl}}/audit-logs?user_id={{userId}}&limit=50
Authorization: Bearer {{accessToken}}

### 80. Filtrer les logs par période
GET {{baseUrl}}/audit-logs?start_date=2025-01-01&end_date=2025-12-31
Authorization: Bearer {{accessToken}}

### 81. Statistiques des logs (30 derniers jours)
GET {{baseUrl}}/audit-logs/stats?days=30
Authorization: Bearer {{accessToken}}

### 82. Logs récents (dernières 24h)
GET {{baseUrl}}/audit-logs/recent?hours=24
Authorization: Bearer {{accessToken}}

### 83. Tentatives de connexion échouées
GET {{baseUrl}}/audit-logs/failed-logins?hours=24
Authorization: Bearer {{accessToken}}

### 84. Historique d'une entité spécifique (ex: un cours)
GET {{baseUrl}}/audit-logs/entity/Course/{{courseId}}
Authorization: Bearer {{accessToken}}

### 85. Historique d'un utilisateur spécifique
GET {{baseUrl}}/audit-logs/user/{{userId}}?limit=100
Authorization: Bearer {{accessToken}}

### 86. Détails d'un log spécifique
GET {{baseUrl}}/audit-logs/AUDIT_LOG_ID
Authorization: Bearer {{accessToken}}

### 87. Exporter les logs (conformité RGPD)
GET {{baseUrl}}/audit-logs/export?start_date=2025-01-01&end_date=2025-12-31
Authorization: Bearer {{accessToken}}

### 88. Nettoyer les logs anciens (retention policy - 1 an par défaut)
POST {{baseUrl}}/audit-logs/clean?retention_days=365
Authorization: Bearer {{accessToken}}

### 89. Note sur l'Audit automatique
# Toutes les actions sont automatiquement loggées :
#
# Actions loggées :
# - CREATE : Création (POST)
# - UPDATE : Modification (PUT/PATCH)
# - DELETE : Suppression (DELETE)
# - LOGIN : Connexion
# - FAILED_LOGIN : Tentative échouée
# - CANCEL : Annulation (cours, abonnement)
# - RENEW : Renouvellement
# - SUSPEND/REACTIVATE : Suspension/Réactivation
#
# Informations capturées :
# - Qui : user_id, user_email, user_role
# - Quoi : action, entity_type, entity_id
# - Quand : created_at
# - Où : ip_address, user_agent
# - Comment : http_method, request_url
# - Valeurs : old_values, new_values (avant/après)
# - Succès : success (true/false), error_message
#
# Conformité RGPD :
# - Traçabilité complète
# - Export possible
# - Retention policy configurable
# - Champs sensibles automatiquement masqués ([REDACTED])
